import numpy as np
import pandas as pd

def sigmoid(x):
    return 1/(1+np.exp(-x))
class Logistic_Regression():
    def __init__(self,lr=0.001,n_itr=1000):
        self.lr=lr
        self.n_itr=n_itr
        self.m=None
        self.c=None
        
    def fit(self,X,y):
        n_samples,n_features = X.shape
        self.m = np.zeros(n_features)
        self.c=0
        
        for _ in range(self.n_itr):
            linear_pred = np.dot(X,self.m) + self.c
            predictions = sigmoid(linear_pred)
            
            dm = (1/n_samples)*(np.dot(X.T,predictions-y))
            dc = (1/n_samples)*(np.sum(predictions - y))
            
            self.m = self.m - self.lr*dm
            self.c = self.c - self.lr*dc
            
    
    def predict(self,X):
        linear_pred = np.dot(X,self.m) + self.c
        y_pred = sigmoid(linear_pred)
        
        class_pred = [0 if y<=0.5 else 1 for y in y_pred]
        return class_pred
    
        
        
from sklearn.model_selection import train_test_split
from sklearn import datasets
import matplotlib.pyplot as plt
bc = datasets.load_breast_cancer()
X,y = bc.data,bc.target


X_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.2 , random_state=1234)
alg = Logistic_Regression(lr=0.001,n_itr=10000)
alg.fit(X_train,Y_train)
Y_pred = alg.predict(X_test)

def accuracy(Y_pred,Y_test):
    return np.sum(Y_pred == Y_test)/len(Y_test)

acc = accuracy(Y_pred,Y_test)

print(acc)
C:\Users\tambo\AppData\Local\Temp\ipykernel_14608\4129999954.py:4: RuntimeWarning: overflow encountered in exp
  return 1/(1+np.exp(-x))
0.9122807017543859
